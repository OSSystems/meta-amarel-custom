#! /bin/sh
### BEGIN INIT INFO
# Short-Description: NetworkManager monitor
# Description:       Daemon for automatically check network
#                    connections.
### END INIT INFO

# local fixes

update-rc.d -f hostapd remove
update-rc.d -f dnsmasq remove
ln -sf /usr/lib/jvm/java-8-oracle/jre/bin/java /usr/bin/java


CFG_FILE=/netatim/network-settings/ipsettingsparams.cfg

NM_DAEMON=/etc/init.d/NetworkManager
NM_SYSCON_DEV_CELL=ttyUSB3
NM_SYSCON_NAME_CELL=cellular_modem
NM_SYSCON_DEV_WIFIAP=mlan0
NM_SYSCON_NAME_WIFIAP=Hostspot
NM_SYSCON_DEV_ETH=eth0
NM_SYSCON_NAME_ETH=Wired

PINGISOK=0
WIFI_MAC_ADDR=''
RETRYCOUNTER=0

#default configuration in case CFG_FILE not exist
CELL_ADDRESS='internetg'
CELL_USER=''
CELL_PASS=''
APN_SSIDNAME=Netbeat
ACCESSPASS='password'
CHANNEL='6'
MLANSTATIC=19.168.1.1
DHCP_RANGE=19.168.1.50,19.168.1.150,12h
NM_MONITOR_PING_PERIOD=60

wait_hw() {
	while [ ! -c /dev/$NM_SYSCON_DEV_CELL ];
	do
		echo "$NM_SYSCON_DEV_CELL not exist yet"
		sleep 1;
	done
	echo "$NM_SYSCON_DEV_CELL is exist"

	while [ -z "$(ifconfig $NM_SYSCON_DEV_WIFIAP)" ]; do
		echo "$NM_SYSCON_DEV_WIFIAP not exist yet"
		sleep 1;
	done
	echo "$NM_SYSCON_DEV_WIFIAP is exist"
}

delete_usb2() {
	if [ -c "/dev/ttyUSB2" ]; then
		echo "Delete ttyUSB2"
		rm /dev/ttyUSB2
	fi
}

nm_reset_configuration() {
	$NM_DAEMON stop
	rm -f /etc/NetworkManager/system-connections/*
	sleep 1
	$NM_DAEMON start
	sleep 1
}

nm_set_default_config() {
	echo configure wired dev $NM_SYSCON_DEV_ETH with new connection $NM_SYSCON_NAME_ETH
	nmcli c add type eth ifname $NM_SYSCON_DEV_ETH con-name $NM_SYSCON_NAME_ETH autoconnect yes
	nmcli c mod $NM_SYSCON_NAME_ETH connection.autoconnect-priority  3
	nmcli c up $NM_SYSCON_NAME_ETH

	echo configure hotsport dev $NM_SYSCON_DEV_CELL with new connection $NM_SYSCON_NAME_CELL
	nmcli c add type gsm ifname $NM_SYSCON_DEV_CELL con-name $NM_SYSCON_NAME_CELL autoconnect yes apn $CELL_ADDRESS
	nmcli c mod $NM_SYSCON_NAME_CELL connection.autoconnect-priority  1
	# cellular APN settings, make sure how to use user/pass if needed or not
	if [ ! -z $CELL_USER ];
	then
		nmcli c mod $NM_SYSCON_NAME_CELL gsm.username $CELL_USER
		if [ ! -z $CELL_PASS ];
		then
			echo cellular need user and a passowrd
			nmcli c mod $NM_SYSCON_NAME_CELL gsm.password $CELL_PASS
		else
			echo cellular need user without passowrd
		fi
	else
		echo cellular does not need user and password
	fi
	nmcli c up $NM_SYSCON_NAME_CELL

	echo configure hotspot dev $NM_SYSCON_DEV_WIFIAP with new connection $NM_SYSCON_NAME_WIFIAP
	WIFI_MAC_ADDR="$(ifconfig eth0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' | tr ":" "-")"
	echo MAC is $WIFI_MAC_ADDR
	nmcli con add type wifi ifname $NM_SYSCON_DEV_WIFIAP con-name $NM_SYSCON_NAME_WIFIAP autoconnect no ssid $APN_SSIDNAME_$WIFI_MAC_ADDR
	nmcli con modify $NM_SYSCON_NAME_WIFIAP 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
	nmcli con modify $NM_SYSCON_NAME_WIFIAP wifi-sec.key-mgmt wpa-psk
	nmcli con modify $NM_SYSCON_NAME_WIFIAP wifi-sec.psk $ACCESSPASS
	nmcli connection modify $NM_SYSCON_NAME_WIFIAP ipv4.addresses 19.168.1.1/24
	nmcli con up $NM_SYSCON_NAME_WIFIAP
}

nm_online() {
	nm-online -t 5
	local ret=$?
	if [ $ret -ne 0 ];
	then
		echo No connectivity, all interfaces are down
	fi
	echo NetworkManager online, at least one interfaces is up
}

validate_network() {
	local pingresult="$(timeout 3 ping google.com -c 3 | grep "time=")"
	if [ -z "$pingresult" ];
	then
		PINGISOK=0
	else
		PINGISOK=1
	fi
}

wait_nm() {
	RETRYCOUNTER=0
	nm-online -t 5
	local ret=$?
	if [ $ret -ne 0 ];
	then
		echo restarting NetworkManager
		$NM_DAEMON restart
		nm-online -t 3
		ret=$?
	fi
	if [ $ret -ne 0 ];
	then
		nm_reset_configuration
		nm_set_default_config
	fi
}

check_wired_interface() {
	local wired_set="$(nmcli c | grep wired)"
	echo eth=$wired_set
	if [ -z "$wired_set" ];
	then
		nmcli c add type eth ifname $NM_SYSCON_DEV_ETH con-name $NM_SYSCON_NAME_ETH autoconnect yes
		nmcli c mod $NM_SYSCON_NAME_ETH connection.autoconnect-priority  3
		nmcli c up 
	fi
}

configure_nm_cellular() {
	echo configuring cellular connection
	# make sure to delete the cellular connetion before configuring a new one
	nmcli c delete $NM_SYSCON_NAME_CELL || true
	nmcli c add type gsm ifname $NM_SYSCON_DEV_CELL con-name $NM_SYSCON_NAME_CELL autoconnect yes apn $CELL_ADDRESS
	nmcli c mod $NM_SYSCON_NAME_CELL connection.autoconnect-priority  1

	# cellular APN settings, make sure how to use user/pass if needed or not
	if [ ! -z $CELL_USER ];
	then
		nmcli c mod $NM_SYSCON_NAME_CELL gsm.username $CELL_USER
		if [ ! -z $CELL_PASS ];
		then
			echo cellular need user and a passowrd
			nmcli c mod $NM_SYSCON_NAME_CELL gsm.password $CELL_PASS
		else
			echo cellular need user without passowrd
		fi
	else
		echo cellular does not need user and password
	fi
	nmcli con up $NM_SYSCON_NAME_WIFIAP
}

configure_nm_wifiap() {
	nmcli c delete $NM_SYSCON_NAME_WIFIAP || true
	nmcli con add type wifi ifname mlan0 con-name $NM_SYSCON_NAME_WIFIAP autoconnect no ssid Netbeat_$WIFI_MAC_ADDR
	nmcli con modify $NM_SYSCON_NAME_WIFIAP 802-11-wireless.mode ap 802-11-wireless.band bg ipv4.method shared
	nmcli con modify $NM_SYSCON_NAME_WIFIAP wifi-sec.key-mgmt wpa-psk
	nmcli con modify $NM_SYSCON_NAME_WIFIAP wifi-sec.psk $ACCESSPASS
	nmcli connection modify $NM_SYSCON_NAME_WIFIAP ipv4.addresses $MLANSTATIC/24
	nmcli con up $NM_SYSCON_NAME_WIFIAP
}

configure_nm() {
	echo "Configure networkmanager connections"
	check_wired_interface
	configure_nm_cellular
	configure_nm_wifiap
}

echo NetworkManager Monitor start

# if configuration file does not exist then use default defined above
if [ -f $CFG_FILE ];
then
	echo "Load configuration file"
	source $CFG_FILE
else
	echo "Configuration file not exist"
fi

wait_hw
delete_usb2
nm_reset_configuration
nm_set_default_config

while [ 1 ]; do
	sleep $NM_MONITOR_PING_PERIOD
	echo checking connectivity
	nm_online
	validate_network
	if [ $PINGISOK -eq 1 ]; then
		echo okay
		continue
	else
		echo no connectivity
		RETRYCOUNTER=0
		while [ $PINGISOK -ne 1 ] && [  $RETRYCOUNTER -lt 3 ]; do
			sleep 3
			echo Recheck network connection: $RETRYCOUNTER
			validate_network
			let "RETRYCOUNTER++"
		done

	fi

	if [ $PINGISOK -ne 1 ]; then
		echo Restart NetworkManager
		nm_reset_configuration
		nm_set_default_config
	fi
done

exit 0


